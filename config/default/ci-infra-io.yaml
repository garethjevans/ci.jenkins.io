rbac:
  readSecrets: true
persistence:
  enabled: true
  size: 100Gi
controller:
  image: jenkinsciinfra/jenkins-weekly@sha256
  tag: 6b95ca10e230ea5d67e4ade4c5e0f251d2e4fffca4daa06b0647f4f2fb4262e8
  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      no-executors: |
        jenkins:
          numExecutors: 0
      matrix-settings: |
        jenkins:
          authorizationStrategy:
            globalMatrix:
              permissions:
                - "Overall/Administer:admin"
                - "Credentials/Create:admin"
                - "Overall/SystemRead:authenticated"
                - "Overall/Read:authenticated"
                - "Agent/ExtendedRead:authenticated"
                - "Job/ExtendedRead:authenticated"
                - "Overall/Read:anonymous"
                - "Job/Read:anonymous"
                - "View/Read:anonymous"
      security-realm: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "admin"
                  password: "p4ssw0rd"
      misc-jenkins: |
        jenkins:
          remotingSecurity:
            enabled: true
          slaveAgentPort: 50000
      system-message: |
        jenkins:
          systemMessage: |
            <div>
              <h1>About ci.jenkins.io</h1>
              <p>This instance hosts several <a href="https://plugins.jenkins.io/github-branch-source">GitHub Organization folders</a> organized by subject area.</p>
              <p>To add continuous integration and PR builds for a Jenkins plugin in the <code>jenkinsci</code> organization,
              just add a <a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/"><code>Jenkinsfile</code></a> to your repository.
              You'll likely only need one line:</p>
              <pre>    buildPlugin()</pre>
              <p>Learn more:</p>
              <ul>
                <li><a href="https://jenkins.io/projects/infrastructure/#jenkins">About the Jenkins infrastructure project</a></li>
                <li><a href="https://github.com/jenkins-infra/documentation/blob/master/ci.adoc#jenkins-on-jenkins">Infrastructure documentation: ci.jenkins.io</a></li>
                <li><a href="https://github.com/jenkins-infra/pipeline-library#pipeline-global-library">Infrastructure documentation: Pipeline library</a></li>
                <li><a href="https://github.com/jenkins-infra/charts/blob/master/config/cijenkinsio/jenkins.yaml">configuration-as-code for ci.jenkins.io</a></li>
              </ul>
            </div>
      markup-formatter: |
        jenkins:
          markupFormatter:
            rawHtml:
              disableSyntaxHighlighting: false
      crumb-issuer: |
        jenkins:
          crumbIssuer:
            standard:
              excludeClientIPFromCrumb: true
      misc-security: |
        security:
          apiToken:
            creationOfLegacyTokenEnabled: false
            tokenGenerationOnCreationEnabled: false
            usageStatisticsEnabled: true
      misc-unclassified: |
        unclassified:
          gitSCM:
            createAccountBasedOnEmail: false
            globalConfigEmail: "oscar@example.com"
            globalConfigName: "oscar"
          pollSCM:
            pollingThreadCount: 10
          timestamper:
            allPipelines: true
      jobs-settings: |
        jobs:
          - script: >
              def configuration = [
                [
                  name        : "Core",
                  repositories: "test-repo*",
                  excludes    : "",
                  trust       : "TrustPermission"
                ]
              ]

              configuration.each { jobConfig ->
                def config = [
                  displayName: jobConfig.name,
                  owner      : "garethjevans-test",
                  excludes   : "",
                  trust      : "TrustPermission"
                ] << jobConfig

                organizationFolder(config.name) {
                  displayName(config.displayName)
                  organizations {
                    github {
                      repoOwner(config.owner)
                      apiUri("https://api.github.com")
                      credentialsId("github-access-token")

                      traits {
                        gitHubTagDiscovery()
                        cloneOptionTrait {
                          extension {
                            shallow(false)
                            noTags(false)
                            reference('')
                            timeout(10)
                            honorRefspec(true)
                          }
                        }
                      }
                    }
                  }
                  projectFactories {
                    workflowMultiBranchProjectFactory {
                      scriptPath("Jenkinsfile")
                    }
                  }
                  // don't keep build jobs for deleted branches
                  orphanedItemStrategy {
                    discardOldItems {
                      daysToKeep(7)
                      numToKeep(10)
                    }
                  }
                  buildStrategies {
                    buildAnyBranches {
                      strategies {
                        buildChangeRequests {
                          ignoreTargetOnlyChanges(true)
                          ignoreUntrustedChanges(true)
                        }
                        buildRegularBranches()
                        buildTags {
                          atLeastDays("0")
                          atMostDays("7")
                        }
                      }
                    }
                  }
                  configure { node ->
                    def traits = node / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
                    traits << 'jenkins.scm.impl.trait.WildcardSCMSourceFilterTrait' {
                      includes(config.repositories)
                      excludes(config.excludes)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$' + config.trust)
                    }
                    traits << 'net.gleske.scmfilter.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                      tagIncludes('*')
                      tagExcludes()
                    }
                    traits << 'org.jenkinsci.plugins.github.label.filter.PullRequestLabelsBlackListFilterTrait' {
                      labels('on-hold ci-skip')
                    }
                  }
                }
              }
          - script: >
              ['ci.jenkins.io', 'jenkins-image'].each { config ->
                multibranchPipelineJob(config) {
                  displayName config

                  branchSources {
                    branchSource {
                      source {
                        github {
                          credentialsId("github-access-token")
                          configuredByUrl(true)
                          repositoryUrl('https://github.com/garethjevans/' + config)
                          repoOwner('garethjevans')
                          repository(config)
                        }
                      }
                      buildStrategies {
                        buildAnyBranches {
                          strategies {
                            buildChangeRequests {
                              ignoreTargetOnlyChanges(true)
                              ignoreUntrustedChanges(true)
                            }
                            buildRegularBranches()
                            buildTags {
                              atLeastDays("0")
                              atMostDays("7")
                            }
                          }
                        }
                      }
                    }
                  }
                  factory {
                    workflowBranchProjectFactory {
                      scriptPath('Jenkinsfile')
                    }
                  }
                  // don't keep build jobs for deleted branches
                  orphanedItemStrategy {
                    discardOldItems {
                      numToKeep(-1)
                    }
                  }
                  configure { node ->
                    def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
                    traits << 'org.jenkinsci.plugins.github__branch__source.TagDiscoveryTrait' {
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                      strategyId(1)
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustContributors')
                    }
                    traits << 'net.gleske.scmfilter.impl.trait.WildcardSCMHeadFilterTrait' {
                      includes('main master PR-*')
                      excludes()
                      tagIncludes('*')
                      tagExcludes()
                    }
                    traits << 'org.jenkinsci.plugins.github.label.filter.PullRequestLabelsBlackListFilterTrait' {
                      labels('on-hold ci-skip')
                    }
                    traits << 'jenkins.plugins.git.traits.CloneOptionTrait' {
                      extension(class: 'hudson.plugins.git.extensions.impl.CloneOption') {
                        shallow(false)
                        noTag(false)
                        reference()
                        depth(0)
                        honorRefspec(false)
                      }
                    }
                  }
                }
              }
      pipeline-library: |
        unclassified:
          globalLibraries:
            libraries:
              - defaultVersion: "master"
                implicit: true
                name: "pipeline-library"
                retriever:
                  modernSCM:
                    scm:
                      git:
                        id: "github-access-token"
                        remote: "https://github.com/garethjevans/pipeline-library.git"
      location: |
        unclassified:
          location:
            adminAddress: "nobody@jenkins.io"
            url: "https://ci.jenkins.io"
      k8s-settings: |
        jenkins:
          clouds:
            - kubernetes:
                containerCapStr: "100"
                jenkinsTunnel: "jenkins-agent:50000"
                jenkinsUrl: "http://jenkins:8080"
                maxRequestsPerHostStr: "300"
                name: "kubernetes"
                namespace: "jenkins"
                podRetention: "Never"
                serverUrl: "https://kubernetes.default"
                podLabels:
                  # Required to be jenkins/<helm-release>-jenkins-slave as definede here
                  # https://github.com/helm/charts/blob/ef0d749132ecfa61b2ea47ccacafeaf5cf1d3d77/stable/jenkins/templates/jenkins-master-networkpolicy.yaml#L27
                  - key: "jenkins/jenkins-agent"
                    value: "true"
                templates:
                  - name: jnlp-linux
                    nodeSelector: "kubernetes.io/os=linux"
                    containers:
                      - name: jnlp
                        image: "jenkins/inbound-agent:latest-jdk11"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        args: "^${computer.jnlpmac} ^${computer.name}"
                        alwaysPullImage: true
                    yaml: |-
                      spec:
                        tolerations:
                        - key: "os"
                          operator: "Equal"
                          value: "windows"
                          effect: "NoSchedule"
  overwritePlugins: false
  installPlugins: false
  sidecars:
    configAutoReload:
      env:
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: METHOD
          # Polling mode (instead of watching kube API)
          value: "SLEEP"
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: SLEEP_TIME
          # Time in seconds between two polls
          value: "60"
  ingress:
    enabled: true
  probes:
    startupProbe:
      initialDelaySeconds: 240
    livenessProbe:
      initialDelaySeconds: 240
    readinessProbe:
      initialDelaySeconds: 240
