rbac:
  readSecrets: true
persistence:
  enabled: true
  size: 100Gi
controller:
  image: jenkinsciinfra/jenkins-weekly
  tag: 0.1.2-2.288
  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      no-executors: |
        jenkins:
          numExecutors: 0
      matrix-settings: |
        jenkins:
          authorizationStrategy:
            globalMatrix:
              permissions:
                - "Overall/Administer:admin"
                - "Credentials/Create:admin"
                - "Overall/SystemRead:authenticated"
                - "Overall/Read:authenticated"
                - "Agent/ExtendedRead:authenticated"
                - "Job/ExtendedRead:authenticated"
                - "Overall/Read:anonymous"
                - "Job/Read:anonymous"
                - "View/Read:anonymous"
      security-realm: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "admin"
                  password: "p4ssw0rd"
      misc-jenkins: |
        jenkins:
          remotingSecurity:
            enabled: true
          slaveAgentPort: 50000
      system-message: |
        jenkins:
          systemMessage: |
            <div>
              <h1>About ci.jenkins.io</h1>
              <p>This instance hosts several <a href="https://plugins.jenkins.io/github-branch-source">GitHub Organization folders</a> organized by subject area.</p>
              <p>To add continuous integration and PR builds for a Jenkins plugin in the <code>jenkinsci</code> organization,
              just add a <a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/"><code>Jenkinsfile</code></a> to your repository.
              You'll likely only need one line:</p>
              <pre>    buildPlugin()</pre>
              <p>Learn more:</p>
              <ul>
                <li><a href="https://jenkins.io/projects/infrastructure/#jenkins">About the Jenkins infrastructure project</a></li>
                <li><a href="https://github.com/jenkins-infra/documentation/blob/master/ci.adoc#jenkins-on-jenkins">Infrastructure documentation: ci.jenkins.io</a></li>
                <li><a href="https://github.com/jenkins-infra/pipeline-library#pipeline-global-library">Infrastructure documentation: Pipeline library</a></li>
                <li><a href="https://github.com/jenkins-infra/charts/blob/master/config/cijenkinsio/jenkins.yaml">configuration-as-code for ci.jenkins.io</a></li>
              </ul>
            </div>
      markup-formatter: |
        jenkins:
          markupFormatter:
            rawHtml:
              disableSyntaxHighlighting: false
      crumb-issuer: |
        jenkins:
          crumbIssuer:
            standard:
              excludeClientIPFromCrumb: true
      misc-security: |
        security:
          apiToken:
            creationOfLegacyTokenEnabled: false
            tokenGenerationOnCreationEnabled: false
            usageStatisticsEnabled: true
      misc-unclassified: |
        unclassified:
          gitSCM:
            createAccountBasedOnEmail: false
            globalConfigEmail: "oscar@example.com"
            globalConfigName: "oscar"
          pollSCM:
            pollingThreadCount: 10
          timestamper:
            allPipelines: true
      jobs-settings: "jobs:\n  - script: >\n      def configuration = [\n        [\n          name        : \"Core\",\n          repositories: \"test-repo*\",\n          excludes    : \"\",\n          trust       : \"TrustPermission\"\n        ]\n      ]\n\n      configuration.each { jobConfig ->\n        def config = [\n          displayName: jobConfig.name,\n          owner      : \"garethjevans-test\",\n          excludes   : \"\",\n          trust      : \"TrustPermission\"\n        ] << jobConfig\n\n        organizationFolder(config.name) {\n          displayName(config.displayName)\n          organizations {\n            github {\n              repoOwner(config.owner)\n              apiUri(\"https://api.github.com\")\n              credentialsId(\"github-access-token\")\n\n              traits {\n                gitHubTagDiscovery()\n                cloneOptionTrait {\n                  extension {\n                    shallow(false)\n                    noTags(false)\n                    reference('')\n                    timeout(10)\n                    honorRefspec(false)\n                  }\n                }\n              }\n            }\n          }\n          projectFactories {\n            workflowMultiBranchProjectFactory {\n              scriptPath(\"Jenkinsfile\")\n            }\n          }\n          // don't keep build jobs for deleted branches\n          orphanedItemStrategy {\n            discardOldItems {\n              daysToKeep(7)\n              numToKeep(10)\n            }\n          }\n          buildStrategies {\n            buildAnyBranches {\n              strategies {\n                buildChangeRequests {\n                  ignoreTargetOnlyChanges(true)\n                  ignoreUntrustedChanges(true)\n                }\n                buildRegularBranches()\n                buildTags {\n                  atLeastDays(\"0\")\n                  atMostDays(\"7\")\n                }\n              }\n            }\n          }\n          configure { node ->\n            def traits = node / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits\n            traits << 'jenkins.scm.impl.trait.WildcardSCMSourceFilterTrait' {\n              includes(config.repositories)\n              excludes(config.excludes)\n            }\n            traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {\n              strategyId(1)\n            }\n            traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {\n              strategyId(1)\n            }\n            traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {\n              strategyId(1)\n              trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$' + config.trust)\n            }\n            traits << 'net.gleske.scmfilter.impl.trait.WildcardSCMHeadFilterTrait' {\n              includes('main master PR-*')\n              excludes()\n              tagIncludes('*')\n              tagExcludes()\n            }\n            traits << 'org.jenkinsci.plugins.github.label.filter.PullRequestLabelsBlackListFilterTrait' {\n              labels('on-hold ci-skip')\n            }\n            traits << 'jenkins.plugins.git.traits.LocalBranchTrait' {\n            \n            }\n          }\n        }\n      }\n  - script: >\n      ['ci.jenkins.io', 'jenkins-image'].each { config ->\n        multibranchPipelineJob(config) {\n          displayName config\n\n          branchSources {\n            branchSource {\n              source {\n                github {\n                  credentialsId(\"github-access-token\")\n                  configuredByUrl(true)\n                  repositoryUrl('https://github.com/garethjevans/' + config)\n                  repoOwner('garethjevans')\n                  repository(config)\n                }\n              }\n              buildStrategies {\n                buildAnyBranches {\n                  strategies {\n                    buildChangeRequests {\n                      ignoreTargetOnlyChanges(true)\n                      ignoreUntrustedChanges(true)\n                    }\n                    buildRegularBranches()\n                    buildTags {\n                      atLeastDays(\"0\")\n                      atMostDays(\"7\")\n                    }\n                  }\n                }\n              }\n            }\n          }\n          factory {\n            workflowBranchProjectFactory {\n              scriptPath('Jenkinsfile')\n            }\n          }\n          // don't keep build jobs for deleted branches\n          orphanedItemStrategy {\n            discardOldItems {\n              numToKeep(-1)\n            }\n          }\n          configure { node ->\n            def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'\n            traits << 'org.jenkinsci.plugins.github__branch__source.TagDiscoveryTrait' {\n            }\n            traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {\n              strategyId(1)\n            }\n            traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {\n              strategyId(1)\n            }\n            traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {\n              strategyId(1)\n              trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustContributors')\n            }\n            traits << 'net.gleske.scmfilter.impl.trait.WildcardSCMHeadFilterTrait' {\n              includes('main master PR-*')\n              excludes()\n              tagIncludes('*')\n              tagExcludes()\n            }\n            traits << 'org.jenkinsci.plugins.github.label.filter.PullRequestLabelsBlackListFilterTrait' {\n              labels('on-hold ci-skip')\n            }\n            traits << 'jenkins.plugins.git.traits.CloneOptionTrait' {\n              extension(class: 'hudson.plugins.git.extensions.impl.CloneOption') {\n                shallow(false)\n                noTags(false)\n                reference()\n                depth(0)\n                honorRefspec(false)\n              }\n            }\n            traits << 'jenkins.plugins.git.traits.LocalBranchTrait' {\n            \n            }\n          }\n        }\n      }\n"
      pipeline-library: |
        unclassified:
          globalLibraries:
            libraries:
              - defaultVersion: "master"
                implicit: true
                name: "pipeline-library"
                retriever:
                  modernSCM:
                    scm:
                      git:
                        id: "github-access-token"
                        remote: "https://github.com/garethjevans/pipeline-library.git"
      location: |
        unclassified:
          location:
            adminAddress: "nobody@jenkins.io"
            url: "https://ci.jenkins.io"
      k8s-settings: |
        jenkins:
          clouds:
            - kubernetes:
                containerCapStr: "100"
                jenkinsUrl: "http://jenkins:8080"
                maxRequestsPerHostStr: "300"
                webSocket: true
                name: "kubernetes"
                namespace: "jenkins"
                podRetention: "Never"
                serverUrl: "https://kubernetes.default"
                podLabels:
                  # Required to be jenkins/<helm-release>-jenkins-slave as definede here
                  # https://github.com/helm/charts/blob/ef0d749132ecfa61b2ea47ccacafeaf5cf1d3d77/stable/jenkins/templates/jenkins-master-networkpolicy.yaml#L27
                  - key: "jenkins/jenkins-agent"
                    value: "true"
                templates:
                  - name: jnlp
                    nodeSelector: "kubernetes.io/os=linux"
                    containers:
                      - name: jnlp
                        image: "jenkins/inbound-agent:latest-jdk11"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        args: 1d
                        alwaysPullImage: true
  overwritePlugins: true
  installPlugins: false
  sidecars:
    configAutoReload:
      env:
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: METHOD
          # Polling mode (instead of watching kube API)
          value: "SLEEP"
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: SLEEP_TIME
          # Time in seconds between two polls
          value: "60"
  ingress:
    enabled: true
  probes:
    startupProbe:
      initialDelaySeconds: 240
    livenessProbe:
      initialDelaySeconds: 240
    readinessProbe:
      initialDelaySeconds: 240
